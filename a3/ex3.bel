% Guillaume Labranche 260585371
% COMP 527 Winter 2016 - Assignment 3 Exercise 3

LF nat :  type =     
| z : nat
| s : nat -> nat;

LF even: nat -> type =
| ev_z : even z
| ev_s : even N -> even (s (s N));

LF ev: nat -> type =
| e_z : ev z
| e_s : odd N -> ev (s N)
and odd: nat -> type =
| o_s: ev N -> odd (s N);

% ----Completeness---
rec complete: [|- even N ] -> [|- ev N ] * [|- odd (s N)] =
/ total e (complete n e) /
fn e => (case e of
  | [|- ev_z] => ([|- e_z], [|- o_s (e_z)])
  | [|- ev_s X] => 
    let ([|- E],[|- O]) = complete [|- X] in ([|- e_s (o_s E)],[|-o_s (e_s (o_s E))])
);

% ----Soundness---

rec sound1: [|- odd N] -> [|- even (s N)] =
/ total e (sound1 n e) /
fn e => (case e of
  | [|- o_s (e_z)] => [|- ev_s ev_z]
  | [|- o_s (e_s X)] => let [|- O] = sound1 [|- X] in [|- ev_s O]
);

rec sound2: [|- ev N] -> [|- even N] =
/ total e (sound2 n e) /
fn e => (case e of
  | [|- e_z] => [|- ev_z]
  | [|- e_s (o_s X)] => let [|- E] = sound2 [|- X] in [|- ev_s E]
);
